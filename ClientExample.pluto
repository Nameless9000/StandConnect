--
-- StandConnect Client Example
--
--
-- MIT No Attribution
--
-- Copyright 2024 Nameless9000
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this
-- software and associated documentation files (the "Software"), to deal in the Software
-- without restriction, including without limitation the rights to use, copy, modify,
-- merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
-- INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
-- PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
-- HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
local { socket, bigint, crypto, json, base64 } = require "pluto:*"

-- Connect to server
local port = 42658
print("Connecting to port "..port)
local c = socket.connect("127.0.0.1", port)
assert(c, "failed to bind tcp")

-- Load server config
local data = c:recv()
assert(data, "server closed connection")

local [RSA_BITS, SERVER_EXPONENT, SERVER_MODULUS] = data:split(":")
assert(RSA_BITS, "server provided invalid data")
assert(SERVER_EXPONENT, "server provided invalid data")
assert(SERVER_MODULUS, "server provided invalid data")

local SERVER_PUB_KEY = {
	n = new bigint(SERVER_MODULUS),
	e = new bigint(SERVER_EXPONENT),
}

-- Generate our key pair
local RSA_PUBLIC_KEY, RSA_PRIVATE_KEY = crypto.generatekeypair("rsa", RSA_BITS)

-- Send the server our config
c:send($"{RSA_PUBLIC_KEY.e:tostring()}:{RSA_PUBLIC_KEY.n:tostring()}")

print("Please allow us to connect.")

-- Check if we are allowed to continue
local allowed = c:recv()
assert(allowed, "Connection request was denied")

-- Code prompt
io.write("Enter code: ")
local secret_code = io.read("*l"):strip()

-- Send the encrypted code
c:send(crypto.encrypt(secret_code, "rsa-pkcs1", SERVER_PUB_KEY))

-- Get the encryption key
data = c:recv()
assert(data, "server closed connection")

local decrypted_key = crypto.decrypt(data, "rsa-pkcs1", RSA_PRIVATE_KEY)
local [ enc_iv, enc_key ] = decrypted_key:split(":")

-- Create helper functions
local function encrypt(plaintext)
	return base64.encode(crypto.encrypt(plaintext, "aes-cbc-pkcs7", enc_key, enc_iv))
end

local function decrypt(encrypted)
	return crypto.decrypt(base64.decode(encrypted), "aes-cbc-pkcs7", enc_key, enc_iv)
end

local function server_exec(lua)
	c:send(encrypt(lua))
	local response = c:recv()
	if not response then
		warn("Connection closed!")
		os.exit()
	end
	
	local res = decrypt(response)
	local decoded = json.decode(res)
	if not decoded or #decoded < 1 then
		return
	end
	
	return decoded[1]
end

-- Make a repl
print("#### REPL - Type 'exit' to exit ####")

while true do
	try
		io.write("> ")
		local lua = io.read("*l"):strip()
		if lua == "exit" then
			break
		end
		
		local result = server_exec(lua)

		print(tostring(result))
	catch e then
		warn("Error: "..e)
	end
end
