--###########################################################################
-- 
-- StandConnect - A script to facilitate secure connections to the stand mod menu
-- 
--###########################################################################
--
--	Credits:
--		Nameless9000 - Creator
--
--###########################################################################
--
-- MIT No Attribution
--
-- Copyright 2024 Nameless9000
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this
-- software and associated documentation files (the "Software"), to deal in the Software
-- without restriction, including without limitation the rights to use, copy, modify,
-- merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
-- INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
-- PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
-- HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
--###########################################################################
---CONFIG
--###########################################################################
--
-- [CONNECTION CONFIG] --
$define MAX_CONNECTIONS = 5
$define PORT = 42658
--
--###########################################################################
--------- CODE - DO NOT TOUCH IF YOU DO NOT KNOW WHAT YOU ARE DOING ---------
--###########################################################################
--
--[[
##### PROTOCOL DESIGN #####

-- CONNECTION OPEN --
#A secret code is displayed to the user
	SERVER: READY
	CLIENT: <secret code>
#The code is verified

	CLIENT: util.toast("Success!")
	SERVER: null
	
	CLIENT: return 2 + 2
	SERVER: 4

-- CONNECTION CLOSE --
]]
--

--########################################--
--MAIN DECLARATIONS
--########################################--

pluto_use "0.9.4"

local { socket, crypto, json, base64 } = require "pluto:*"
local listener

-- Script dependency
util.require_natives("3095a", "g")

--########################################--
--SHARED CONNECTION DATA
--########################################--

local connection_count = 0
local connection_data = {
--[[
	{
		force_close = false;
	}
]]
}
local connections_allowed = true

--########################################--
--UTIL FUNCTIONS
--########################################--


-- A simple macro to create alerts
local function ALERT(message: string)
	util.toast("[StandConnect]: "..message, TOAST_ALL)
end


-- A simple macro to log events
local function LOG(message: string)
	util.toast("[StandConnect]: "..message, TOAST_LOGGER)
end


-- Function to run lua code at runtime
local function load(lua: string, menu_list = menu.my_root())
	local store_dir = filesystem.store_dir()
	local scripts_dir = store_dir .. "\\StandConnect\\"
	
	if not filesystem.exists(scripts_dir) then
		filesystem.mkdir(scripts_dir)
	end
	
	local filepath = $"{scripts_dir}{crypto.sha1(lua)}.dat"
	if not filesystem.exists(filepath) then
		file = io.open(filepath, "w")
		file:write(lua)
		file:close()
	end
	
	-- Make fake root
	local old_get_root = menu.my_root
	_ENV.menu.my_root = function()
		return menu_list
	end
	
	-- Execute script
	local response = dofile(filepath)
	
	-- Cleanup and return
	_ENV.menu.my_root = old_get_root
	
	return response
end


--########################################--
--CREATE UI
--########################################--


local UI_ROOT = menu.my_root()

-- Toggle to globally disable connections
local TOGGLE_DISABLE_CONNECTIONS = UI_ROOT:toggle("Disable New Connections", {}, "", function(toggle)
	connections_allowed = not toggle
end)


--########################################--
--SECURITY
--########################################--


-- Blocking prompt state
local IS_PROMPT_ACTIVE = false


-- Function to create confirmation prompts
local function create_confirmation_prompt(message: string, redirect = menu.get_current_menu_list(), times_required = 3): boolean <nodiscard>
	-- Lock to prevent multiple prompts
	while IS_PROMPT_ACTIVE do
		util.yield(100)
	end
	IS_PROMPT_ACTIVE = true

	-- Make prompt
	local prompt
	prompt = menu.ref_by_path("Stand"):list("StandConnect Security", {}, "", nil, function()
		prompt:focus()
	end)
	
	prompt:divider("[StandConnect Security]")
	prompt:divider(message)
	
	-- Prompt state
	local active = true
	local result = false
	local times_agreed = 0
	
	-- Options
	local option_yes
	option_yes = prompt:action($"Yes ({times_required})", {}, "", function()
		times_agreed += 1
		if times_agreed >= times_required then
			result = true
			active = false
			return
		end
		
		option_yes.menu_name = $"Are you sure? ({times_required - times_agreed})"
	end)
	local option_no = prompt:action("No", {}, "", function()
		active = false
	end)

	option_no:focus()

	-- Keep thread blocked until response
	while active do
		-- force user in prompt
		if not option_no:isFocused() and not option_yes:isFocused() then
			option_no:focus()
		end
		util.yield(100)
	end
	
	-- Cleanup
	IS_PROMPT_ACTIVE = false
	redirect:focus()
	menu.default_and_delete(prompt)
	
	-- Logging
	if result then
		LOG("Prompt '"..message.."' was allowed")
	else
		LOG("Prompt '"..message.."' was denied")
	end
	
	return result
end


--########################################--
--ENUMS
--########################################--


enum AUTH_STATUS begin
	OK,
	INVALID_KEY,
	BAD_REQUEST,
	REQUEST_DENIED,
	CLIENT_CLOSE
end


--########################################--
--PROCESS AUTHENTICATION
--########################################--


-- Function to handle the authorization of connections
local function handle_auth(id: number, connection: userdata, connection_root) <nodiscard>
	-- Generate secret code
	local SECRET_CODE = crypto.random(1000000, 9999999)
	local code_display = connection_root:divider($"Code: {SECRET_CODE}")
	
	-- Check for continue
	local should_continue = create_confirmation_prompt($"Do you want to allow a connection?", redirect=code_display)
	if not should_continue then
		return AUTH_STATUS.REQUEST_DENIED
	end
	
	-- Send ready signal
	connection:send("READY")
	
	-- Recieve client's attempt
	local key_confirmation = connection:recv()
	if not key_confirmation then
		return AUTH_STATUS.CLIENT_CLOSE
	end
	
	-- Check key
	if key_confirmation ~= tostring(SECRET_CODE) then
		return AUTH_STATUS.INVALID_KEY
	end
	
	ALERT($"Connection {id} was authorized")
	code_display:delete()
	
	return AUTH_STATUS.OK
end


--########################################--
--PROCESS REQUESTS
--########################################--


-- Function to handle connections
local function handle_connection(id: number, connection: userdata, connection_root): void
	-- authorization checks
	local authorized = handle_auth(id, connection, connection_root)
	if authorized ~= AUTH_STATUS.OK then
		ALERT("Authorization failed with error code: "..authorized)
		return
	end
	
	-- handle execution
	while connection do
		local data = connection:recv()
		if not data then
			return
		end
		
		LOG($"Connection {id} sent execution request")
		
		-- Execute the code
		local response = nil
		try
			response = load(data, connection_root)
		catch err then
			ALERT($"Connection {id}: {err}")
			continue
		end
		
		-- it works..
		local encoded = json.encode({response})
		connection:send(encoded)
	end
end


--########################################--
--START THREADS
--########################################--


-- Function thread to handle the processing of new connections
local function connection_thread(): void
	while true do
		while not listener:hasconnection() do
			util.yield(10)
		end

		-- accept connection
		local connection = listener:accept()
		if not connection then
			continue
		end
		
		-- check if connections allowed
		if not connections_allowed then
			connection:close()
			continue
		end
		
		connection_count += 1
		ALERT("Connection "..connection_count.." connected")
		
		-- make connection ui
		local connection_root = UI_ROOT:list($"Connection {connection_count}")
		connection_root:action("Force Close Connection", {}, "Forces the connection to close", function()
			connection:close()
		end)
		
		-- connected
		handle_connection(connection_count, connection, connection_root)
		
		-- disconnected
		ALERT("Connection "..connection_count.." disconnected")
		
		-- cleanup connection
		connection_root:delete()
		connection:close()
		connection_count -= 1
	end
end


--########################################--
--START THREADS
--########################################--


listener = socket.listen(PORT)
assert(listener, "failed to bind tcp/"..PORT)

for thread = 1, MAX_CONNECTIONS do
	util.create_thread(connection_thread)
end
